
-- _mode --> read, reset, add, remove, get
function template(_path, _mode, _arg)
	_path = _path or "valoros/sys/fs-templates"
	_mode = _mode or "list"
	if not fs.exists(_path) then
		return false
	end
	local f = fs.open(_path, "r")
	local content = f.readAll()
	f.close()
	if not content then
		local def = [[selected = default;
default = {
	api =             "api/";
	api_conf =        "api/config";
	api_misc =        "api/misc";
	api_shape =       "api/shape";
	moved =           "moved/";
	prefix =          "/valoros/";
	prgm =            "prgm/";
	sys =             "sys/";
	sys_conf =        "sys/sys-config.conf";
	sys_fstemp =      "sys/fs-templates";
	sys_main =        "sys/main.lua";
	user =            "user/";
	user_root =       "user/root/";
	user_root_data =  "user/root/user-data.conf";
	user_root_files = "user/root/files/";
}]]
		local f = fs.open(_path, "w")
		f.write(def)
		f.close()
		content = def
	end
	local text = content:gsub("%s", "")
	
	if _mode == "read" then
		-- remove 'selected'
		local _, sel1 = text:find("selected='")
		local sel2 = text:find("'", sel1 + 1)
		if not text:find(text:sub(sel1 + 1, sel2 - 1), sel2 + 1) or not sel1 or not sel2 then
			error("Invalid selected template '"..text:sub(sel1 + 1, sel2 - 1):gsub("\n", "").."'")
		end
		text = text:sub(sel2 + 1)
		
		-- read templates
		local templates = {}
		local names = {}
		local node = {"", true}
		local path = {"", false}
		
		-- check # of {}s
		local left, right = 0, 0
		for m in text:gmatch("[{}]") do
			if m == "{" then
				left = left + 1
			elseif m == "}" then
				right = right + 1
			end
		end
		if (left == right) and (left ~= 0) then
			for t = 1, left do
				templates[text:sub(1, text:find("={") - 1)] = {}
				table.insert(names, text:sub(1, text:find("={") - 1))
				for i = text:find("={") + 2, text:sub(1, text:find("}")):len() do
					local c = text:sub(i, i)
					local nc = text:sub(i + 1, i + 1)
					local lc = text:sub(i - 1, i - 1)
					if c == "}" then
						break
					
					-- name or path
					elseif c:gsub("[%w%-%./:_]", "X") == "X" then
						if node[2] then
							node[1] = node[1]..c
						elseif path[2] then
							path[1] = path[1]..c
						else
							error("Misplaced term '"..text:sub(i, text:find("%W:") or i).."' in template '"..(names[#names] or "[unknown template]").."'")
						end
					
					-- start path
					elseif (c == "=") and (nc == "\"") then
						if node[2] then
							node[2] = false
							path[2] = true
						else
							error("Misplaced term '=\"' ('"..text:sub(i - 5, i + 6).."') in template '"..(names[#names] or "[unknown template]").."'")
						end
					
					-- end path
					elseif (c == "\"") and (nc == ";") then
						if path[2] then
							node[2] = true
							path[2] = false
							templates[names[#names]][node[1] or "[error]"] = path[1] or "[error]"
							node[1] = ""
							path[1] = ""
						else
							error("Misplaced term '\";' ('"..text:sub(i - 5, i + 6).."') in template '"..(names[#names] or "[unknown template]").."'")
						end
					elseif ((c == "\"") and (lc == "=")) or ((c == ";") and (lc == "\"")) then
						-- ignore
					else
						error("Unknown term '"..c.."' ('"..text:sub(i - 5, i + 5).."') in template '"..(names[#names] or "[unknown template]").."'")
					end
				end
				text = text:sub(text:find("}") + 1)
			end
		else
			error("Invalid template file: misplaced or missing '{}'s")
		end
	end
end

function read( _mask, _history, _limit, _noTerminate )
  if _mask and type(_mask) ~= "string" then
    error("Invalid parameter #1: Expected string, got "..type(_mask), 2)
  end
  if _history and type(_history) ~= "table" then
    error("Invalid parameter #2: Expected table, got "..type(_history), 2)
  end
  if _limit and type(_limit) ~= "number" then
    error("Invalid parameter #3: Expected number, got "..type(_limit), 2)
  end
  if _noTerminate and type(_noTerminate) ~= "boolean" then
    error("Invalid argument #3: Expected boolean, got "..nativeType(_noTerminate), 2)
  end
  
  term.setCursorBlink(true)

  local input = ""
  local pos = 0
  local historyPos = nil
  local pullEvent = _noTerminate and os.pullEventRaw or os.pullEvent 

  local sw, sh = term.getSize()
  local sx, sy = term.getCursorPos()
  
  local function redraw( _special )
    local scroll = (sx + pos >= sw and (sx + pos) - sw or 0)
    local replace = _special or _mask
    local output = replace and (string.rep( replace, math.ceil(#input / #replace) - scroll )):sub(1, #input) or input:sub(scroll + 1)
    term.setCursorPos( sx, sy )
    term.write( output )
    term.setCursorPos( sx + pos - scroll, sy )
  end

  local nativeScroll = term.scroll
  term.scroll = function( _n ) local ok, err = pcall( function() return nativeScroll( _n ) end ) if ok then sy = sy - _n return err end error( err, 2 ) end

  while true do
    local event, code = pullEvent()
    if event == "char" and (not _limit or #input < _limit) then
      input = input:sub(1, pos)..code..input:sub(pos+1)
      pos = pos + 1
    elseif event == "paste" then
      input = input:sub(1, pos)..code..input:sub(pos+1)
      pos = pos + #code
    elseif event == "key" then
      if code == keys.enter or code == keys.numPadEnter then
        break
      elseif code == keys.backspace and pos > 0 then
        redraw(' ')
        input = input:sub(1, math.max(pos-1, 0))..input:sub(pos+1)
        pos = math.max(pos-1, 0)
      elseif code == keys.delete and pos < #input then
        redraw(' ')
        input = input:sub(1, pos)..input:sub(pos+2)
      elseif code == keys.home then
        pos = 0
      elseif code == keys["end"] then
        pos = #input
      elseif code == keys.left and pos > 0 then
        pos = math.max(pos-1, 0)
      elseif code == keys.right and pos < #input then
        pos = math.min(pos+1, #input)
      elseif _history and code == keys.up or code == keys.down then
        redraw(' ')
        if code == keys.up then
          if not historyPos then
            historyPos = #_history 
          elseif historyPos > 1 then
            historyPos = historyPos - 1
          end
        else
          if historyPos ~= nil and historyPos < #_history then
            historyPos = math.max(historyPos+1, #_history)
          elseif historyPos == #_history then
            historyPos = nil
          end
        end

        if historyPos and #_history > 0 then
          input = string.sub(_history[historyPos], 1, _limit) or ""
          pos = #input
        else
          input = ""
          pos = 0
        end
      end
    end

    redraw(_mask)
  end

  term.scroll = nativeScroll

  term.setCursorBlink(false)

  if sy + 1 > sh then
    term.scroll(sy + 1 - sh)
    term.setCursorPos(1, sy)
  else
    term.setCursorPos(1, sy + 1)
  end

  return input
end
