-- shape API v1.0 by ValorCat

local default = colors.white
local w, h = term.getSize()

local function isValidNum(d, ...)
	if (d ~= "w") and (d ~= "h") then
		d = type(d) == "string" and d or type(d)
		error("Expected 'w' or 'h', got "..d, 2)
	end
	for _, num in pairs({...}) do
		if type(num) ~= "number" then
			error("Expected number, got "..type(num), 3)
		end
		local d = d == "w" and w or h
		if (num > d) or (num <= 0) then
			error("Expected value between "..d.." and 0, got "..num, 3)
		end
	end
	return true
end

local function isValidCol(...)
	local args = {...}
	if #args < 1 then
		error("Expected number, got nil", 3)
	end
	for _, col in pairs(args) do
		if type(col) ~= "number" then
			col = type(col) == "number" and col or type(col)
			error("Expected a valid color integer, got "..col, 3)
		end
	end
	return true
end

local function round(...)
	local done = {}
	for _, num in pairs({...}) do
		local _, dec = math.modf(num)
		table.insert(done, dec < 5 and math.floor(num) or math.ceil(num))
	end
	return unpack(done)
end

local function draw(_x, _y)
	local x, y = term.getCursorPos()
	term.setCursorPos(_x, _y)
	term.write(" ")
	term.setCursorPos(x, y)
end

function dot(_x, _y, _c)
	isValidNum("w", _x)
	isValidNum("h", _y)
	isValidCol(_c)
	_x, _y = round(_x, _y)
	term.setBackgroundColor(_c)
	draw(_x, _y)
	return 1
end

function line(_sx, _sy, _ex, _ey, _c)
	isValidNum("w", _sx, _ex)
	isValidNum("h", _sy, _ey)
	isValidCol(_c)
	_sx, _sy, _ex, _ey = round(_sx, _sy, _ex, _ey)
	term.setBackgroundColor(_c)
	if (_sx == _ex) and (_sy == _ey) then
		draw(_sx, _sy)
		return
	end
	local minx = math.min(_sx, _ex)
	local miny = minx == _sx and _sy or _ey
	local maxx = minx == _sx and _ex or _sx
	local maxy = minx == _sx and _ey or _sy
	local difx = maxx - minx
	local dify = maxy - miny
	local pixels = 0
	if difx > math.abs(dify) then
		for i = minx, maxx do
			draw(i, math.floor(miny + 0.5))
			miny = miny + (dify / difx)
			pixels = pixels + 1
		end
	else
		if maxy >= miny then
			for i = miny, maxy do
				draw(math.floor(minx + 0.5), i)
				minx = minx + (difx / dify)
				pixels = pixels + 1
			end
		else
			for i = miny, maxy, -1 do
				draw(math.floor(minx + 0.5), i)
				minx = minx + (difx / dify)
				pixels = pixels + 1
			end
		end
	end
	return pixels
end

function box(_x1, _y1, _x2, _y2, _c)
	isValidNum("w", _x1, _x2)
	isValidNum("h", _y1, _y2)
	isValidCol(_c)
	x1, y1, x2, y2 = round(_x1, _y1, _x2, _y2)
	if y2 < y1 then
		for row = y2, y1 do
			line(x1, row, x2, row, _c)
		end
	else
		for row = y2, y1, -1 do
			line(x1, row, x2, row, _c)
		end
	end
	return math.abs(x1 - x2) * math.abs(y1 - y2)
end

function outline(_x1, _y1, _x2, _y2, _c)
	isValidNum("w", _x1, _x2)
	isValidNum("h", _y1, _y2)
	isValidCol(_c)
	_x1, _y1, _x2, _y2 = round(_x1, _y1, _x2, _y2)
	local x1, x2, y1, y2
	local a = _x1 > _x2
	local b = _y1 > _y2
	if a and b then
		x1, x2, y1, y2 = _x2, _x1, _y2, _y1
	elseif a and not b then
		x1, x2, y1, y2 = _x2, _x1, _y1, _y2
	elseif not a and b then
		x1, x2, y1, y2 = _x1, _x2, _y2, _y1
	elseif not a and not b then
		x1, x2, y1, y2 = _x1, _x2, _y1, _y2
	end
	line(x1, y1, x2, y1, _c) -- top
	line(x1, y1, x1, y2, _c) -- left
	line(x2, y1, x2, y2, _c) -- right
	line(x1, y2, x2, y2, _c) -- bottom
	return (math.abs(x1 - x2) * 2) + (math.abs(y1 - y2) * 2)
end

function polygon(...)
	local _coords = {...}
	if (#_coords % 2 == 0) or (#_coords < 1) then
		error("Expected coordinate pairs and a color", 2)
	end
	local c = table.remove(_coords)
	local x, y = {}, {}
	for num, val in pairs(_coords) do
		table.insert(num % 2 == 0 and y or x, val)
	end
	isValidNum("w", unpack(x))
	isValidNum("h", unpack(y))
	isValidCol(c)
	local pixels = 0
	for i = 1, #x do
		if i < #x then
			pixels = pixels + line(x[i], y[i], x[i + 1], y[i + 1], c)
		else
			pixels = pixels + line(x[i], y[i], x[1], y[1], c)
		end
	end
	return pixels
end

function circle( _x, _y, _r, _c )
	isValidNum("w", _x)
	isValidNum("h", _y)
	isValidCol(_c)
    term.setBackgroundColor(_c)
    local step = 1 / (_r * 1.5)
    local pixels = 0
    for angle = 1, math.pi + step, step do
        local px = math.cos(angle) * _r * 1.5
        local py = math.sin(angle) * _r
        for i = -1, 1, 2 do
            for j = -1, 1, 2 do
                draw(_x + i * px, _y + j * py)
                pixels = pixels + 1
            end
        end
	end
	return pixels
end

function fill(_c)
	isValidCol(_c)
	term.setBackgroundColor(_c)
	term.clear()
end

function textbox(_t, _x, _y, _bc, _tc)
	isValidNum("w", _x)
	isValidNum("h", _y)
	isValidCol(_bc, _tc)
	local x, y = round(_x, _y)
	local t = tostring(_t):sub(1, w - x - 1)
	term.setCursorPos(x, y)
	term.setBackgroundColor(_bc)
	term.setTextColor(_tc)
	term.write(t)
	return #t
end
